import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from surprise import Dataset, Reader, SVD
from surprise.model_selection import train_test_split
from surprise import accuracy

st.title("üìö H·ªá Th·ªëng G·ª£i √ù S√°ch D·ª±a Tr√™n SVD")

# Load dataset
@st.cache_data
def load_data():
    df = pd.read_csv("./data/Books_rating.csv.zip", compression="zip")
    
    # Chu·∫©n h√≥a c·ªôt
    df = df.rename(columns={"User_id": "UserID", "Id": "BookID", "review/score": "Rating", "title": "Title"})
    df = df[["BookID", "UserID", "Rating", "Title"]].dropna().drop_duplicates()

    # L·ªçc d·ªØ li·ªáu
    min_reviews, max_reviews = 5, 500
    user_counts = df["UserID"].value_counts()
    df = df[df["UserID"].map(user_counts).between(min_reviews, max_reviews)]

    # Encode UserID v√† BookID
    user_encoder, book_encoder = LabelEncoder(), LabelEncoder()
    df["UserID"] = user_encoder.fit_transform(df["UserID"])
    df["BookID"] = book_encoder.fit_transform(df["BookID"])

    # C√¢n b·∫±ng d·ªØ li·ªáu b·∫±ng downsampling
    probabilities = {1: 0.95, 2: 0.9, 3: 0.45, 4: 0.18, 5: 0.074}
    df["Keep"] = df["Rating"].apply(lambda x: np.random.rand() < probabilities[x])
    df_balanced = df[df["Keep"]].drop(columns=["Keep"])
    
    return df_balanced, user_encoder, book_encoder

df_balanced, user_encoder, book_encoder = load_data()

# Hi·ªÉn th·ªã th√¥ng tin dataset
num_users = df_balanced["UserID"].nunique()
num_books = df_balanced["BookID"].nunique()
num_ratings = df_balanced.shape[0]

st.write(f"üë§ S·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng: {num_users}")
st.write(f"üìñ S·ªë l∆∞·ª£ng s√°ch: {num_books}")
st.write(f"‚≠ê S·ªë l∆∞·ª£ng ƒë√°nh gi√°: {num_ratings}")

# Danh s√°ch 10 ng∆∞·ªùi d√πng ng·∫´u nhi√™n
st.subheader("üë• Danh s√°ch 10 ng∆∞·ªùi d√πng ng·∫´u nhi√™n:")
random_users = np.random.choice(df_balanced["UserID"].unique(), 10, replace=False)
random_users_decoded = user_encoder.inverse_transform(random_users)
st.write(random_users_decoded)

# Chu·∫©n b·ªã d·ªØ li·ªáu cho Surprise
reader = Reader(rating_scale=(1, 5))
data = Dataset.load_from_df(df_balanced[["UserID", "BookID", "Rating"]], reader)
trainset, testset = train_test_split(data, test_size=0.2, random_state=42)

# Hu·∫•n luy·ªán m√¥ h√¨nh SVD
st.subheader("‚öôÔ∏è Hu·∫•n luy·ªán m√¥ h√¨nh SVD")
model = SVD(n_factors=50, n_epochs=30, lr_all=0.005, reg_all=0.02, random_state=42)
model.fit(trainset)

# ƒê√°nh gi√° m√¥ h√¨nh
predictions = model.test(testset)
rmse = accuracy.rmse(predictions)
st.write(f"üìâ RMSE c·ªßa m√¥ h√¨nh: {rmse:.4f}")

# H√†m g·ª£i √Ω s√°ch (k√®m t√™n s√°ch v√† rating d·ª± ƒëo√°n)
def recommend_books(user_id, model, df, book_encoder, n=5):
    all_books = df["BookID"].unique()
    rated_books = df[df["UserID"] == user_id]["BookID"].values
    books_to_predict = [book for book in all_books if book not in rated_books]
    predictions = [model.predict(user_id, book) for book in books_to_predict]
    predictions.sort(key=lambda x: x.est, reverse=True)

    # L·∫•y th√¥ng tin s√°ch g·ª£i √Ω
    recommended_books = []
    seen_titles = set()
    
    for pred in predictions:
        book_id = pred.iid
        title = df[df["BookID"] == book_id]["Title"].values[0]
        if title not in seen_titles:
            seen_titles.add(title)
            recommended_books.append({"BookID": book_id, "Title": title, "Predicted_Rating": pred.est})
        if len(recommended_books) >= n:
            break

    return recommended_books

# G·ª£i √Ω s√°ch
st.subheader("üìñ G·ª£i √Ω s√°ch cho ng∆∞·ªùi d√πng")
user_input = st.text_input("Nh·∫≠p UserID ƒë·ªÉ nh·∫≠n g·ª£i √Ω s√°ch:")

if user_input:
    if user_input in user_encoder.classes_:
        user_id = user_encoder.transform([user_input])[0]
        recommended_books = recommend_books(user_id, model, df_balanced, book_encoder)

        if recommended_books:
            st.write(f"üìö **Top 5 s√°ch g·ª£i √Ω cho user {user_input}:**")
            for book in recommended_books:
                st.write(f"- **{book['Title']}** (ID: {book['BookID']}) - ‚≠ê {book['Predicted_Rating']:.2f}")
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng c√≥ g·ª£i √Ω ph√π h·ª£p cho user n√†y.")
    else:
        st.error("‚ö†Ô∏è UserID kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu, vui l√≤ng nh·∫≠p ID kh√°c!")

st.success("‚úÖ H·ªá th·ªëng g·ª£i √Ω s√°ch ƒë√£ s·∫µn s√†ng!")
